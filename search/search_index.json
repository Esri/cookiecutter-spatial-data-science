{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GeoAI-Cookiecutter GeoAI-Cookiecutter is an opionated analysis template striving to streamline and promote use of best practices for projects combining Geography and Artificial Intelligence through a logical, reasonably standardized, and flexible project structure. GeoAI-Cookiecutter grew out of a need within the Advanced Analytics team at Esri to streamline project bootstrapping, encourage innovation, increase repeatability, encourage documentation, and encourage best practices based on strong opinions (best practices) . Why use this project structure? Data Science and GIS are both about providing actionable insights . The visual results communicating actionable insights, maps, graphs and infographics are typically what first come to mind. Not surprisingly, these information products frequently get the most attention. However, these visualizations merely communicate results of complex analysis, and the path toward unearthing these insights requires creative exploration coupled with repeatability. Actionable insights for decision making requires structure not impeding creative innovation. The best analyses are frequently the result of incredibly scattershot experimentation. This requires the ability to quickly test seemingly harebrained approaches. While most do not work, the ones that do, this is where innovation happens and genius is discovered. Once discovered, for the discovery to be useful, it must be repeatable. While creativity and repeatability may initially first feel at odds, a standardized project structure used according to best practices not only facilitates creativity, but also enables repeatability. This, in turn, increases the ability to iterate more quickly, discover more insights, and generally become more productive. Not only will your own work benefit, this benefits your colleagues as well. Others Will Thank You Templating tools started with web development. Pick a framework. Ember.js, Angular, Django, Rails - every single one has a project generator scaffolding out a project according to conventions and best practices. This speeds up starting a new project and makes collaboration much easier. Anybody else looking at the project will know where to look for resources, and since resources are logically organized, even if they are not familiar with the exact structure, can logically deduce where to find things. Thus, utilizing a standard template facilitates collaboration, repeatability, and confidence in your work. While applicable across disciplines, all of these become especially useful for projects part of research being submitted for peer review. You Will Thank You Repeatability not only applies to your colleagues being able to repeat your work, it applies even more to the person who must repeat your work most often, you . Spaghetti code with multiple steps, and experimental iterations in different notebooks is impossible to decipher two weeks, two months, two years, or all too frequently, even two days later. Revisiting previous analysis in disorganized projects takes considerable time, and detracts from working on new and innovative projects. Disorganization is frustrating and dramatically adversely affects your productivity. Good project structure encourages best practices, it makes them easy, so you can come back to your previous work easily and be productive! Nothing is Binding \"A foolish consistency is the hobgoblin of little minds\" \u2014 Ralph Waldo Emerson (and PEP 8! ) GeoAI-Cookiecutter is a starting point for projects, but is not absolute. If details do not work, change them in your project based on your needs, but be consistent . After all, this is how GeoAI-Cookiecutter came into existence! Cookiecutter Data Science is an excellent template for data science work, but did not meet all the needs for marrying Geographic and Artificial Intelligence analysis workflows. We extended and modified this template to achieve consistency addressing our additional needs. Even within a project, if something does not work, simply follow the path that does work, but do it with consistency . This way, for yourself and others looking at your work, your workflows and code will make sense. Consistency within a project is more important. Consistency within one module or function is the most important. ... However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask! \u2014 ( PEP 8! ) Asking is important! Learn from peers and colleagues. Getting Started GeoAI-Cookiecutter provides a template for starting projects taking advantage of the combined capabilities of ArcGIS Pro , Esri Cloud GIS ( ArcGIS Enterprise or ArcGIS Online ), and the broad ecosystem of Machine Learning technologies using Python in a Conda environment. Although it is designed to accommodate environments not including ArcGIS Pro, it then becomes little more than Cookiecutter Data Science. Consequently, it is highly recommended you use GeoAI-Cookiecutter in an ArcGIS Pro Python Conda environment, which is installed with ArcGIS Pro. Requirements ArcGIS Pro 2.7 Conda - either Anaconda3 or miniconda Cookiecutter Getting up and started with your first new environment is as easy as... > conda create --name arcgis python=3.7 Next, activate this new environment. > activate arcgis Now, install arcpy and arcgis . > conda install -c esri arcgis arcpy -y Finally, install Cookiecutter. > conda install -c conda-forge cookiecutter -y Now, you have an environment ready to go! If you are want to see this a walkthrough, well, we have that as well. Starting a New Project Now, once you have Cookiecutter installed in an environment, you can use the GeoAI-Cookiecutter template to quickly start a new project. > cookiecutter https://github.com/esri/geoai-cookiecutter Once you answer all the questions, the new project is now created as a new directory in the current working directory. Assuming your project name is sik-pro , your new Conda environment is going to be named sik_pro . Hence, to create this environment, run the following. > cd sik-pro > make env This creates the environment and gets it ready for use. The following prompt will indicate this new environment is active by displaying the new environment name in parenthesis to the left of the command prompt. You are ready to get to work. If you also want to see a video of this, here you go! Project Organization and Structure The GeoAI-Cookiecutter template provides a structure for project resources, marrying data science directory structure with the functionality of ArcGIS Pro. This primarily means organizing the project following most of the best practices and conventions from Cookiecutter Data Science, and adapting ArcGIS Pro to easily work within this paradigm. Directory Structure \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile <- Makefile with commands like `make data` \u251c\u2500\u2500 make.bat <- Windows batch file with commands like `make data` \u251c\u2500\u2500 setup.py <- Setup script for the library ({{ cookiecutter.support_library }}) \u251c\u2500\u2500 .env <- Any environment variables here - created as part of project creation, \u2502 but NOT syncronized with git repo for project. \u251c\u2500\u2500 README.md <- The top-level README for developers using this project. \u251c\u2500\u2500 arcgis <- Root location for ArcGIS Pro project created as part of \u2502 \u2502 data science project creation. \u2502 \u251c\u2500\u2500 {{ cookiecutter.project_name }}.aprx <- ArcGIS Pro project. \u2502 \u2514\u2500\u2500 {{ cookiecutter.project_name }}.tbx <- ArcGIS Pro toolbox associated with the project. \u251c\u2500\u2500 scripts <- Put scripts to run things here. \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 external <- Data from third party sources. \u2502 \u251c\u2500\u2500 interim <- Intermediate data that has been transformed. \u2502 \u2502 \u2514\u2500\u2500 interim.gdb \u2502 \u251c\u2500\u2500 processed <- The final, canonical data sets for modeling. \u2502 \u2502 \u2514\u2500\u2500 processed.gdb \u2502 \u2514\u2500\u2500 raw <- The original, immutable data dump. \u2502 \u2514\u2500\u2500 raw.gdb \u251c\u2500\u2500 docs <- Location where all built html docs will reside. \u251c\u2500\u2500 docsrc <- A default Sphinx project; see sphinx-doc.org for details \u251c\u2500\u2500 models <- Trained and serialized models, model predictions, or model summaries \u251c\u2500\u2500 notebooks <- Jupyter notebooks. Naming convention is a 2 digits (for ordering), \u2502 \u2502 descriptive name. e.g.: 01_exploratory_analysis.ipynb \u2502 \u2514\u2500\u2500 notebook_template.ipynb \u251c\u2500\u2500 references <- Data dictionaries, manuals, and all other explanatory materials. \u251c\u2500\u2500 reports <- Generated analysis as HTML, PDF, LaTeX, etc. \u2502 \u2514\u2500\u2500 figures <- Generated graphics and figures to be used in reporting \u251c\u2500\u2500 environment.yml <- The requirements file for reproducing the analysis environment. This \u2502 is generated by running `conda env export > environment.yml` or \u2502 `make env_export`. \u2514\u2500\u2500 src <- Source code for use in this project. \u2514\u2500\u2500 {{ cookiecutter.support_library }} <- Library containing the bulk of code used in this project. ArcGIS Pro Project (aprx) Configuration While the ArcGIS Pro project is located in the ./arcgis directory, the data is located in another directory. To make life easier, the three file geodatabases, interim.gdb, processed.gdb and raw.gdb are all already registered. Additionally, the arcgis, data, and notebooks directories are all also registered in the Pro project. This makes it easy to access useful resources from ArcGIS Pro. Opinions Opinions guide best practices, but are still only opinions. However, following the best practices and conventions laid out by these opinions will go a long ways towards achieving repeatability, facilitating collaboration and increasing both your and your colleagues confidence in your work. In the case of our team, these opionions embody team practices and Esri company policies. Autonomous Environment The available machine learning and deep learning technologies available in Python is staggering. Fortunately, a large number of them are available simply as installable pip or conda packages. A very large part of reproducibility is being able to reproduce the environment. GeoAI-Cookiecutter facilitates this process by streamlining the process of creating a full functioning new Conda environment for a new project. To create a project preflighted with a few useful packages, simply ensure you are in the root of the project and type the following into the command line. > make env Notebooks are for Exploration and Communication Jupyter Notebooks are for exploration, experimentation and communication. Notebooks are NOT for data production and analysis reproduction. Notebooks have revolutionized data exploration and experimentation with code, and for this reason, are a favorite tool for exploring new ideas. For this reason, they should be used frequently to explore workflows. Notebooks are also tremendously valuable tool for highlighting analysis innovation and visualizing results dynamically. Frequently notebooks can be an integral part of communicating how analysis is accomplished and performed. However, the notebooks should succinctly highlight unique analysis aspects, not show the entire beginning to end process. Raw Data Immutability Immutable adjective - that cannot be changed; that will never change Synonym - unchangeable Leaving original data unchanged, and building an automated data transformation pipeline dramatically streamlines repeatability. This frequently is even to the extent of data format. This makes it much easier to revisit and revise results with new data as it becomes available. This is the explicit purpose of the ./data/raw directory. Put your untouched raw data in this directory, and develop the pipeline to transform this data into a usable form, placing this usable data into the ./data/interim directory. Further, to repeat the work, the data does not necessarily need to be in source control. By default, due to both this reason, and the common limitation of GitHub to store large files, the ./data directory is excluded from synchronization with source control in the .gitignore file. As a supplementary option for enabling access to the data, GeoAI-Cookiecutter includes the capability to upload and download data using Azure Blob Storage . Analysis is a DAG A directed acyclic graph (DAG) is a finite directed graph with no directed cycles. Frequently data preparation is a time consuming process, and especially in the early stages of development, involves a lot of trial and error. For this reason each step in the data preparation process should cache results to the interim data directory or file geodatabase, and following steps should check for this intermediate data. This way if intermediate data has already been created, the data preparation pipeline does not need to start over from the beginning every time. This is the structure of SciKit Learn Transformers , both out of the box and custom transformers, assembled into a data transformation Pipeline . This is useful both in development of the data pipeline and even in production. During development, this enables iterative experimentation to continue moving forward. Once in production, this enables troubleshooting where the problem in the pipeline occurred as opposed to having to start the entire process over just to find the one place in the code causing the issue. Keep Secrets Out of Version Control Sharing your work is highly encouraged, but sharing sensitive information definitely is not . Almost without exception, compromising credentials or tokens granting access to company or organization resources can quickly compromise your position with the organization. Please do not do this. To protect access to information, never put passwords or other sensitive information into any files synchronized with version control. GeoAI-Cookiecutter implements the convention of Cookiecutter Data Science by keeping this sensitive information in a special file excluded from version control, and provides a method of easily accessing these values from anywhere in the project. Special File .env The .env file is created by default for storing sensitive information when the project is created, but excluded from version control in the .gitignore file. If a project is downloaded from version control, typically GitHub, this file will be missing. It will either need to be procured through another channel, or simply manually recreated. By default, on project creation, the .env file will look similar to this. AZURE_STORAGE_ACCOUNT_NAME = azureaccountname AZURE_STORAGE_ACCOUNT_KEY = longcrypticcharacterstring ESRI_GIS_URL = https://myorgname.maps.arcgis.com ESRI_GIS_USERNAME = my_cloud_gis_username ESRI_GIS_PASSWORD = R3@!!y_H@rd_T0_Gu3$$_@nd_H@rd3r_T0_R3m3mb3r_P@$$w0rd Load Variables Using Dotenv Among the packages included in the default environment.yml file is python-dotenv . This package enables loading the variables so they are accessible using os.getenv . For instance, to be able to instantiate the GIS object, using variables stored in the .env file, the following can be used. from arcgis.gis import GIS from dotenv import load_dotenv, find_dotenv # find .env automagically by walking up directories until found and load entries as env vars load_dotenv(find_dotenv()) # use environment variables to instantiate the GIS object gis = GIS( url=os.getenv('ESRI_GIS_URL'), username=os.getenv('ESRI_GIS_USERNAME'), password=os.getenv('ESRI_GIS_PASSWORD') ) Thank You! GeoAI-Cookiectutter is bulit on the shoulders of giants. It is merely an evoloution of existing work by DrivenData and Cookiecutter to suit the needs we have working at the intersection of geography and artificial intelligence. We owe a huge debt of gratitude to both. DrivenData Huge thank you to DrivenData for creating the outstanding Cookiecutter Data Science template we used as the starting point for GeoAI-Cookiecutter. Cookiecutter Data Science provided the framework for initially addressing many of our team's internal collaboration challenges, and evolved into what you see here. DrivenData, we could not have done it without you! Thank you! Cookiecutter Neither GeoAI-Cookiecutter nor Cookiecutter Data Science would be possible without the outstanding open source project Cookiecutter. Licensing Copyright 2020 Esri Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. A copy of the license is available directly from the Apache foundation .","title":"Home"},{"location":"#geoai-cookiecutter","text":"GeoAI-Cookiecutter is an opionated analysis template striving to streamline and promote use of best practices for projects combining Geography and Artificial Intelligence through a logical, reasonably standardized, and flexible project structure. GeoAI-Cookiecutter grew out of a need within the Advanced Analytics team at Esri to streamline project bootstrapping, encourage innovation, increase repeatability, encourage documentation, and encourage best practices based on strong opinions (best practices) .","title":"GeoAI-Cookiecutter"},{"location":"#why-use-this-project-structure","text":"Data Science and GIS are both about providing actionable insights . The visual results communicating actionable insights, maps, graphs and infographics are typically what first come to mind. Not surprisingly, these information products frequently get the most attention. However, these visualizations merely communicate results of complex analysis, and the path toward unearthing these insights requires creative exploration coupled with repeatability. Actionable insights for decision making requires structure not impeding creative innovation. The best analyses are frequently the result of incredibly scattershot experimentation. This requires the ability to quickly test seemingly harebrained approaches. While most do not work, the ones that do, this is where innovation happens and genius is discovered. Once discovered, for the discovery to be useful, it must be repeatable. While creativity and repeatability may initially first feel at odds, a standardized project structure used according to best practices not only facilitates creativity, but also enables repeatability. This, in turn, increases the ability to iterate more quickly, discover more insights, and generally become more productive. Not only will your own work benefit, this benefits your colleagues as well.","title":"Why use this project structure?"},{"location":"#others-will-thank-you","text":"Templating tools started with web development. Pick a framework. Ember.js, Angular, Django, Rails - every single one has a project generator scaffolding out a project according to conventions and best practices. This speeds up starting a new project and makes collaboration much easier. Anybody else looking at the project will know where to look for resources, and since resources are logically organized, even if they are not familiar with the exact structure, can logically deduce where to find things. Thus, utilizing a standard template facilitates collaboration, repeatability, and confidence in your work. While applicable across disciplines, all of these become especially useful for projects part of research being submitted for peer review.","title":"Others Will Thank You"},{"location":"#you-will-thank-you","text":"Repeatability not only applies to your colleagues being able to repeat your work, it applies even more to the person who must repeat your work most often, you . Spaghetti code with multiple steps, and experimental iterations in different notebooks is impossible to decipher two weeks, two months, two years, or all too frequently, even two days later. Revisiting previous analysis in disorganized projects takes considerable time, and detracts from working on new and innovative projects. Disorganization is frustrating and dramatically adversely affects your productivity. Good project structure encourages best practices, it makes them easy, so you can come back to your previous work easily and be productive!","title":"You Will Thank You"},{"location":"#nothing-is-binding","text":"\"A foolish consistency is the hobgoblin of little minds\" \u2014 Ralph Waldo Emerson (and PEP 8! ) GeoAI-Cookiecutter is a starting point for projects, but is not absolute. If details do not work, change them in your project based on your needs, but be consistent . After all, this is how GeoAI-Cookiecutter came into existence! Cookiecutter Data Science is an excellent template for data science work, but did not meet all the needs for marrying Geographic and Artificial Intelligence analysis workflows. We extended and modified this template to achieve consistency addressing our additional needs. Even within a project, if something does not work, simply follow the path that does work, but do it with consistency . This way, for yourself and others looking at your work, your workflows and code will make sense. Consistency within a project is more important. Consistency within one module or function is the most important. ... However, know when to be inconsistent -- sometimes style guide recommendations just aren't applicable. When in doubt, use your best judgment. Look at other examples and decide what looks best. And don't hesitate to ask! \u2014 ( PEP 8! ) Asking is important! Learn from peers and colleagues.","title":"Nothing is Binding"},{"location":"#getting-started","text":"GeoAI-Cookiecutter provides a template for starting projects taking advantage of the combined capabilities of ArcGIS Pro , Esri Cloud GIS ( ArcGIS Enterprise or ArcGIS Online ), and the broad ecosystem of Machine Learning technologies using Python in a Conda environment. Although it is designed to accommodate environments not including ArcGIS Pro, it then becomes little more than Cookiecutter Data Science. Consequently, it is highly recommended you use GeoAI-Cookiecutter in an ArcGIS Pro Python Conda environment, which is installed with ArcGIS Pro.","title":"Getting Started"},{"location":"#requirements","text":"ArcGIS Pro 2.7 Conda - either Anaconda3 or miniconda Cookiecutter Getting up and started with your first new environment is as easy as... > conda create --name arcgis python=3.7 Next, activate this new environment. > activate arcgis Now, install arcpy and arcgis . > conda install -c esri arcgis arcpy -y Finally, install Cookiecutter. > conda install -c conda-forge cookiecutter -y Now, you have an environment ready to go! If you are want to see this a walkthrough, well, we have that as well.","title":"Requirements"},{"location":"#starting-a-new-project","text":"Now, once you have Cookiecutter installed in an environment, you can use the GeoAI-Cookiecutter template to quickly start a new project. > cookiecutter https://github.com/esri/geoai-cookiecutter Once you answer all the questions, the new project is now created as a new directory in the current working directory. Assuming your project name is sik-pro , your new Conda environment is going to be named sik_pro . Hence, to create this environment, run the following. > cd sik-pro > make env This creates the environment and gets it ready for use. The following prompt will indicate this new environment is active by displaying the new environment name in parenthesis to the left of the command prompt. You are ready to get to work. If you also want to see a video of this, here you go!","title":"Starting a New Project"},{"location":"#project-organization-and-structure","text":"The GeoAI-Cookiecutter template provides a structure for project resources, marrying data science directory structure with the functionality of ArcGIS Pro. This primarily means organizing the project following most of the best practices and conventions from Cookiecutter Data Science, and adapting ArcGIS Pro to easily work within this paradigm.","title":"Project Organization and Structure"},{"location":"#directory-structure","text":"\u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 Makefile <- Makefile with commands like `make data` \u251c\u2500\u2500 make.bat <- Windows batch file with commands like `make data` \u251c\u2500\u2500 setup.py <- Setup script for the library ({{ cookiecutter.support_library }}) \u251c\u2500\u2500 .env <- Any environment variables here - created as part of project creation, \u2502 but NOT syncronized with git repo for project. \u251c\u2500\u2500 README.md <- The top-level README for developers using this project. \u251c\u2500\u2500 arcgis <- Root location for ArcGIS Pro project created as part of \u2502 \u2502 data science project creation. \u2502 \u251c\u2500\u2500 {{ cookiecutter.project_name }}.aprx <- ArcGIS Pro project. \u2502 \u2514\u2500\u2500 {{ cookiecutter.project_name }}.tbx <- ArcGIS Pro toolbox associated with the project. \u251c\u2500\u2500 scripts <- Put scripts to run things here. \u251c\u2500\u2500 data \u2502 \u251c\u2500\u2500 external <- Data from third party sources. \u2502 \u251c\u2500\u2500 interim <- Intermediate data that has been transformed. \u2502 \u2502 \u2514\u2500\u2500 interim.gdb \u2502 \u251c\u2500\u2500 processed <- The final, canonical data sets for modeling. \u2502 \u2502 \u2514\u2500\u2500 processed.gdb \u2502 \u2514\u2500\u2500 raw <- The original, immutable data dump. \u2502 \u2514\u2500\u2500 raw.gdb \u251c\u2500\u2500 docs <- Location where all built html docs will reside. \u251c\u2500\u2500 docsrc <- A default Sphinx project; see sphinx-doc.org for details \u251c\u2500\u2500 models <- Trained and serialized models, model predictions, or model summaries \u251c\u2500\u2500 notebooks <- Jupyter notebooks. Naming convention is a 2 digits (for ordering), \u2502 \u2502 descriptive name. e.g.: 01_exploratory_analysis.ipynb \u2502 \u2514\u2500\u2500 notebook_template.ipynb \u251c\u2500\u2500 references <- Data dictionaries, manuals, and all other explanatory materials. \u251c\u2500\u2500 reports <- Generated analysis as HTML, PDF, LaTeX, etc. \u2502 \u2514\u2500\u2500 figures <- Generated graphics and figures to be used in reporting \u251c\u2500\u2500 environment.yml <- The requirements file for reproducing the analysis environment. This \u2502 is generated by running `conda env export > environment.yml` or \u2502 `make env_export`. \u2514\u2500\u2500 src <- Source code for use in this project. \u2514\u2500\u2500 {{ cookiecutter.support_library }} <- Library containing the bulk of code used in this project.","title":"Directory Structure"},{"location":"#arcgis-pro-project-aprx-configuration","text":"While the ArcGIS Pro project is located in the ./arcgis directory, the data is located in another directory. To make life easier, the three file geodatabases, interim.gdb, processed.gdb and raw.gdb are all already registered. Additionally, the arcgis, data, and notebooks directories are all also registered in the Pro project. This makes it easy to access useful resources from ArcGIS Pro.","title":"ArcGIS Pro Project (aprx) Configuration"},{"location":"#opinions","text":"Opinions guide best practices, but are still only opinions. However, following the best practices and conventions laid out by these opinions will go a long ways towards achieving repeatability, facilitating collaboration and increasing both your and your colleagues confidence in your work. In the case of our team, these opionions embody team practices and Esri company policies.","title":"Opinions"},{"location":"#autonomous-environment","text":"The available machine learning and deep learning technologies available in Python is staggering. Fortunately, a large number of them are available simply as installable pip or conda packages. A very large part of reproducibility is being able to reproduce the environment. GeoAI-Cookiecutter facilitates this process by streamlining the process of creating a full functioning new Conda environment for a new project. To create a project preflighted with a few useful packages, simply ensure you are in the root of the project and type the following into the command line. > make env","title":"Autonomous Environment"},{"location":"#notebooks-are-for-exploration-and-communication","text":"Jupyter Notebooks are for exploration, experimentation and communication. Notebooks are NOT for data production and analysis reproduction. Notebooks have revolutionized data exploration and experimentation with code, and for this reason, are a favorite tool for exploring new ideas. For this reason, they should be used frequently to explore workflows. Notebooks are also tremendously valuable tool for highlighting analysis innovation and visualizing results dynamically. Frequently notebooks can be an integral part of communicating how analysis is accomplished and performed. However, the notebooks should succinctly highlight unique analysis aspects, not show the entire beginning to end process.","title":"Notebooks are for Exploration and Communication"},{"location":"#raw-data-immutability","text":"Immutable adjective - that cannot be changed; that will never change Synonym - unchangeable Leaving original data unchanged, and building an automated data transformation pipeline dramatically streamlines repeatability. This frequently is even to the extent of data format. This makes it much easier to revisit and revise results with new data as it becomes available. This is the explicit purpose of the ./data/raw directory. Put your untouched raw data in this directory, and develop the pipeline to transform this data into a usable form, placing this usable data into the ./data/interim directory. Further, to repeat the work, the data does not necessarily need to be in source control. By default, due to both this reason, and the common limitation of GitHub to store large files, the ./data directory is excluded from synchronization with source control in the .gitignore file. As a supplementary option for enabling access to the data, GeoAI-Cookiecutter includes the capability to upload and download data using Azure Blob Storage .","title":"Raw Data Immutability"},{"location":"#analysis-is-a-dag","text":"A directed acyclic graph (DAG) is a finite directed graph with no directed cycles. Frequently data preparation is a time consuming process, and especially in the early stages of development, involves a lot of trial and error. For this reason each step in the data preparation process should cache results to the interim data directory or file geodatabase, and following steps should check for this intermediate data. This way if intermediate data has already been created, the data preparation pipeline does not need to start over from the beginning every time. This is the structure of SciKit Learn Transformers , both out of the box and custom transformers, assembled into a data transformation Pipeline . This is useful both in development of the data pipeline and even in production. During development, this enables iterative experimentation to continue moving forward. Once in production, this enables troubleshooting where the problem in the pipeline occurred as opposed to having to start the entire process over just to find the one place in the code causing the issue.","title":"Analysis is a DAG"},{"location":"#keep-secrets-out-of-version-control","text":"Sharing your work is highly encouraged, but sharing sensitive information definitely is not . Almost without exception, compromising credentials or tokens granting access to company or organization resources can quickly compromise your position with the organization. Please do not do this. To protect access to information, never put passwords or other sensitive information into any files synchronized with version control. GeoAI-Cookiecutter implements the convention of Cookiecutter Data Science by keeping this sensitive information in a special file excluded from version control, and provides a method of easily accessing these values from anywhere in the project.","title":"Keep Secrets Out of Version Control"},{"location":"#special-file-env","text":"The .env file is created by default for storing sensitive information when the project is created, but excluded from version control in the .gitignore file. If a project is downloaded from version control, typically GitHub, this file will be missing. It will either need to be procured through another channel, or simply manually recreated. By default, on project creation, the .env file will look similar to this. AZURE_STORAGE_ACCOUNT_NAME = azureaccountname AZURE_STORAGE_ACCOUNT_KEY = longcrypticcharacterstring ESRI_GIS_URL = https://myorgname.maps.arcgis.com ESRI_GIS_USERNAME = my_cloud_gis_username ESRI_GIS_PASSWORD = R3@!!y_H@rd_T0_Gu3$$_@nd_H@rd3r_T0_R3m3mb3r_P@$$w0rd","title":"Special File .env"},{"location":"#load-variables-using-dotenv","text":"Among the packages included in the default environment.yml file is python-dotenv . This package enables loading the variables so they are accessible using os.getenv . For instance, to be able to instantiate the GIS object, using variables stored in the .env file, the following can be used. from arcgis.gis import GIS from dotenv import load_dotenv, find_dotenv # find .env automagically by walking up directories until found and load entries as env vars load_dotenv(find_dotenv()) # use environment variables to instantiate the GIS object gis = GIS( url=os.getenv('ESRI_GIS_URL'), username=os.getenv('ESRI_GIS_USERNAME'), password=os.getenv('ESRI_GIS_PASSWORD') )","title":"Load Variables Using Dotenv"},{"location":"#thank-you","text":"GeoAI-Cookiectutter is bulit on the shoulders of giants. It is merely an evoloution of existing work by DrivenData and Cookiecutter to suit the needs we have working at the intersection of geography and artificial intelligence. We owe a huge debt of gratitude to both.","title":"Thank You!"},{"location":"#drivendata","text":"Huge thank you to DrivenData for creating the outstanding Cookiecutter Data Science template we used as the starting point for GeoAI-Cookiecutter. Cookiecutter Data Science provided the framework for initially addressing many of our team's internal collaboration challenges, and evolved into what you see here. DrivenData, we could not have done it without you! Thank you!","title":"DrivenData"},{"location":"#cookiecutter","text":"Neither GeoAI-Cookiecutter nor Cookiecutter Data Science would be possible without the outstanding open source project Cookiecutter.","title":"Cookiecutter"},{"location":"#licensing","text":"Copyright 2020 Esri Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. A copy of the license is available directly from the Apache foundation .","title":"Licensing"},{"location":"make/","text":"Make - Explained There is a lot of functionality included in the GeoAI-Cookiecutter template. Instead of writing endless documentation detailing how to find and use all these resources, we have created a file, make.bat , containing shortcuts to accomplish a whole boatload of tasks. As with most all the functionality in this template, this came out of our own needs to streamline workflows, and not have to dig all around in the template to get boring and routing tasks accomplished. The commands available in make.bat fall into three general categories, data preprocessing, data management, and environment management. Data Preprocessing More than anything else GeoAI-Cookiecutter is designed to streamline the process of geographic feature engineering to create quantitative factors for use in machine learning modeling. > make data The initial step of preparing the data for analysis can take a decent amount of time. As you develop the steps for the data preparation pipeline, place them into ./scripts/make_data.py. Then, when you need to prepare data, all you need to do is use this command to build your data for modeling. Environment Management Managing the Python Conda environment is dramatically streamlined using the commands contained in make.bat . Quite honestly, this is one of the single largest motivating factors for initially creating it. These are the two most common commands, but there are more in there if you want to look. > make env This is the most commonly used command. This command creates a Conda environment using the name set up when originally creating the project, and also installs the local module using pip in experimental mode. This means your custom code built to accompnay the module will be available in this new conda environment. > make env_remove Multiple environments for projects quickly litter your computer. Hence, once finished with an environment for a project, this makes it easier to remove the environment from the machine. > make ec2 This is only included in the Linux version in Makefile . This is used to configure an AWS EC2 instance to be able to run your project if your project does not require arcpy .","title":"Make Explained"},{"location":"make/#make-explained","text":"There is a lot of functionality included in the GeoAI-Cookiecutter template. Instead of writing endless documentation detailing how to find and use all these resources, we have created a file, make.bat , containing shortcuts to accomplish a whole boatload of tasks. As with most all the functionality in this template, this came out of our own needs to streamline workflows, and not have to dig all around in the template to get boring and routing tasks accomplished. The commands available in make.bat fall into three general categories, data preprocessing, data management, and environment management.","title":"Make - Explained"},{"location":"make/#data-preprocessing","text":"More than anything else GeoAI-Cookiecutter is designed to streamline the process of geographic feature engineering to create quantitative factors for use in machine learning modeling.","title":"Data Preprocessing"},{"location":"make/#make-data","text":"The initial step of preparing the data for analysis can take a decent amount of time. As you develop the steps for the data preparation pipeline, place them into ./scripts/make_data.py. Then, when you need to prepare data, all you need to do is use this command to build your data for modeling.","title":"&gt; make data"},{"location":"make/#environment-management","text":"Managing the Python Conda environment is dramatically streamlined using the commands contained in make.bat . Quite honestly, this is one of the single largest motivating factors for initially creating it. These are the two most common commands, but there are more in there if you want to look.","title":"Environment Management"},{"location":"make/#make-env","text":"This is the most commonly used command. This command creates a Conda environment using the name set up when originally creating the project, and also installs the local module using pip in experimental mode. This means your custom code built to accompnay the module will be available in this new conda environment.","title":"&gt; make env"},{"location":"make/#make-env_remove","text":"Multiple environments for projects quickly litter your computer. Hence, once finished with an environment for a project, this makes it easier to remove the environment from the machine.","title":"&gt; make env_remove"},{"location":"make/#make-ec2","text":"This is only included in the Linux version in Makefile . This is used to configure an AWS EC2 instance to be able to run your project if your project does not require arcpy .","title":"&gt; make ec2"}]}